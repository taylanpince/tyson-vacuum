#include <Servo.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>

// Software SPI (slower updates, more flexible pin options):
// pin 7 - Serial clock out (SCLK)
// pin 6 - Serial data out (DIN)
// pin 5 - Data/Command select (D/C)
// pin 4 - LCD chip select (CS)
// pin 3 - LCD reset (RST)
Adafruit_PCD8544 display = Adafruit_PCD8544(10, 9, 8, 7, 6);

const unsigned char tysonLogo [] PROGMEM = {
  // 'tyson, 84x48px
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xf8, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xe0, 0x06, 0x7c, 0xfc, 0x0f, 0xc1, 0xf8, 0x41, 0xff, 
  0xf0, 0xff, 0xe0, 0x00, 0x7c, 0x30, 0x0f, 0x00, 0x78, 0x00, 0xff, 0xf0, 0xff, 0xe0, 0x04, 0x38, 
  0x60, 0x0e, 0x00, 0x38, 0x00, 0x7f, 0xf0, 0xff, 0xf8, 0x7c, 0x38, 0x61, 0xfe, 0x1c, 0x38, 0x38, 
  0x7f, 0xf0, 0xff, 0xf8, 0x7c, 0x38, 0xe0, 0xfc, 0x3e, 0x18, 0x78, 0x7f, 0xf0, 0xff, 0xf8, 0x7e, 
  0x10, 0xf0, 0x3c, 0x3e, 0x18, 0x78, 0x7f, 0xf0, 0xff, 0xf8, 0x7e, 0x11, 0xf8, 0x1c, 0x3e, 0x18, 
  0x78, 0x7f, 0xf0, 0xff, 0xf8, 0x7f, 0x11, 0xfe, 0x0c, 0x3e, 0x18, 0x78, 0x7f, 0xf0, 0xff, 0xf8, 
  0x3f, 0x01, 0xff, 0x0e, 0x1c, 0x38, 0x78, 0x7f, 0xf0, 0xff, 0xf8, 0x07, 0x03, 0xe0, 0x0e, 0x00, 
  0x38, 0x78, 0x7f, 0xf0, 0xff, 0xfc, 0x07, 0x83, 0xe0, 0x1f, 0x00, 0x78, 0x78, 0x7f, 0xf0, 0xff, 
  0xff, 0x07, 0x87, 0xe0, 0x7f, 0xc1, 0xf8, 0x78, 0x7f, 0xf0, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xfe, 0x0f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0
};

Servo ESC;

static int powerButtonPin = 2;
static int motorPin = 4;
static int inputVoltagePin = A0;
static int backlightPin = 11;

int targetMotorPower = 30;
int currentMotorPower = 30;
bool motorState = false;
bool vacuumEnabled = true;

double inputVoltage = 0.0;
int chargingState = 0;

void setup() {
  // Turn backlight on
  pinMode(backlightPin, OUTPUT);
  digitalWrite(backlightPin, HIGH);

  display.begin();
  display.setContrast(50);

  ESC.attach(motorPin, 1000, 2000);

  pinMode(inputVoltagePin, INPUT);
  pinMode(powerButtonPin, INPUT);
  digitalWrite(powerButtonPin, HIGH);

  display.clearDisplay();
  display.drawBitmap(0, 0,  tysonLogo, 84, 48, 1);
  display.display();
  delay(3000);

  Serial.begin(57600);
}

void loop() {
  if (vacuumEnabled) {
    int powerMode = digitalRead(powerButtonPin);
  
    if (powerMode == LOW && motorState == false) {
      motorState = true;
      targetMotorPower = 80;
    } else if (powerMode == HIGH && motorState == true) {
      motorState = false;
      targetMotorPower = 30;
    }
  
    if (targetMotorPower > currentMotorPower) {
      currentMotorPower += 1;
    } else if (targetMotorPower < currentMotorPower) {
      currentMotorPower -= 1;
    }
  } else {
    currentMotorPower = 0;
  }

  ESC.write(currentMotorPower);

  int inputVoltageReading = analogRead(inputVoltagePin);

  inputVoltage = (inputVoltageReading * 5) / 1024.0;
  inputVoltage = inputVoltage * 12.6 / 2.202;

  display.clearDisplay();
  display.setTextColor(BLACK);
  display.setCursor(0,0);

//  lcd.print("Input: ");
//  lcd.print(inputVoltage, 1);
//  lcd.print("v");

  if (inputVoltage > 14.0) {
    vacuumEnabled = false;
    
    display.setTextSize(1.5);
    display.print("Charging");

    for (int i = 0; i < chargingState; i++) {
      display.print(".");
    }

    chargingState = (chargingState >= 3) ? 0 : chargingState + 1;

    display.println();
    display.println("Unplug to use");
  } else if (inputVoltage > 0.1) {
    vacuumEnabled = true;
    
    int remainingTime = (inputVoltage - 10.0) * 36.0 / 2.6;
  
    display.setTextSize(1);
    display.println("Battery");
    display.setTextSize(2);
    display.print(remainingTime);
    display.println("min");
  } else {
    vacuumEnabled = false;
      
    display.setTextSize(1);
    display.println("Battery");
    display.setTextSize(2);
    display.println("Charge needed");
  }
  
  display.display();
  delay(100);
}
